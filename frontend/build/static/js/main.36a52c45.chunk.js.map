{"version":3,"sources":["components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","Config/ChatLogics.js","components/miscellaneous/ProfileModal.js","Context/ChatProvider.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["Login","show","setShow","useState","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","history","useHistory","_jsxs","VStack","spacing","children","FormControl","id","isRequired","_jsx","FormLabel","Input","value","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","ViewIcon","ViewOffIcon","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","config","headers","data","axios","post","localStorage","setItem","JSON","stringify","push","error","description","response","message","isLoading","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","p","accept","pics","undefined","console","log","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","useEffect","parse","getItem","Container","maxW","centerContent","Box","d","justifyContent","bg","w","m","borderRadius","borderWidth","Text","fontSize","fontFamily","Tabs","isFitted","variant","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","_ref","user","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","base","icon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","fontWeight","ModalFooter","textColor","ChatContext","createContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","setUser","notification","setNotification","chats","setChats","userInfo","Provider","ScrollableChat","ScrollableFeed","map","display","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","concat","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","token","put","chatId","handleRemove","chatName","flexWrap","pb","ml","query","get","handleSearch","Spinner","socket","selectedChatCompare","SingleChat","showEmoji","setShowEmoji","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","className","overflowY","alignSelf","margin","Lottie","options","marginBottom","onKeyDown","event","key","height","handleEmojiShowHide","BsEmojiSmile","Picker","onEmojiClick","emoji","pt","pr","lastTypingTime","Date","getTime","setTimeout","IoSendSharp","getSenderFull","Chatbox","ChatLoading","Stack","Skeleton","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.36a52c45.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    // console.log(email, password);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      // console.log(JSON.stringify(data));\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 2000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ?  <ViewIcon/> : <ViewOffIcon/>}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n      {/* <Button\n        variant=\"solid\"\n        colorScheme=\"red\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"guest@example.com\");\n          setPassword(\"123456\");\n        }}\n      >\n        Get Guest User Credentials\n      </Button> */}\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [confirmpassword, setConfirmpassword] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [pic, setPic] = useState(\"\");\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\",pics);\n      data.append(\"upload_preset\",\"hello-app\");\n      data.append(\"cloud_name\",\"dbo9twrrz\");\n      fetch(\"https://api.cloudinary.com/v1_1/dbo9twrrz/image/upload\",\n      {method:\"post\",\n       body:data,\n       })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ?  <ViewIcon/> : <ViewOffIcon/>}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ?  <ViewIcon/> : <ViewOffIcon/>}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg=\"white\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n      >\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n          Messanger APP\n        </Text>\n      </Box>\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\">\n            <Tab>Login</Tab>\n            <Tab>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\"  onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"20px\", md: \"25px\" }}\n              fontWeight='bold'\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button bg=\"pink.700\" textColor='white' onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../Config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nconst UserListItem = ({user, handleFunction }) => {\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../Config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { BsEmojiSmile } from 'react-icons/bs';\nimport { IoSendSharp } from 'react-icons/io5';\nimport Picker from 'emoji-picker-react';\n// const ENDPOINT = \"http://localhost:5000\";\nconst ENDPOINT = \"https://chat-app-wevp.onrender.com\";\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [showEmoji, setShowEmoji] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const handleEmojiShowHide = () => {\n    setShowEmoji(!showEmoji);\n  }\n  const handleEmojiClick = (e) => {\n    setNewMessage((newMessage) => newMessage += e.emoji);\n  }\n  // const sendEmoji=(e)=>{\n  //   setNewMessage(e.target.value);\n  // }\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"newMessage\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  const sendText = async () => {\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"newMessage\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <div className=\"chatpage\">\n            <Box\n\n              d=\"flex\"\n              flexDir=\"column\"\n              justifyContent=\"flex-end\"\n              p={3}\n              w=\"100%\"\n              h=\"100%\"\n              borderRadius=\"lg\"\n              overflowY=\"hidden\"\n            >\n              {loading ? (\n                <Spinner\n                  size=\"xl\"\n                  w={20}\n                  h={20}\n                  alignSelf=\"center\"\n                  margin=\"auto\"\n                />\n              ) : (\n                <div className=\"messages\">\n                  <ScrollableChat messages={messages} />\n                </div>\n              )}\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    width={70}\n                    style={{ marginBottom: 5, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <FormControl\n                d={{ base: \"flex\" }}\n                onKeyDown={sendMessage}\n                id=\"first-name\"\n                isRequired\n                mt={3}\n              >\n\n                <div className=\"textbox\">\n                  <Box\n                    d=\"flex\"\n                    bg=\"gray\"\n                    justifyContent=\"space-between\"\n                    width=\"100%\"\n                    height=\"100%\"\n                  >\n                    <Box p={3}>\n                      <div className=\"emoji\">\n                        <IconButton\n                          onClick={handleEmojiShowHide}\n                          icon={<BsEmojiSmile color=\"black\" />}\n                        />\n\n                        <div className=\"emoji-picker-react\">\n                          {showEmoji &&\n                            <Picker onEmojiClick={handleEmojiClick} />\n                          }\n                        </div>\n                      </div>\n                    </Box>\n\n                    <Box\n                      pt={3}\n                      pb={3}\n                      pl={0}\n                      pr={0}\n                      width=\"100%\"\n                    >\n                      <Input\n                        variant=\"filled\"\n                        bg=\"#E0E0E0\"\n                        placeholder=\"Enter a message...\"\n                        value={newMessage}\n                        onChange={typingHandler}\n                      />\n                    </Box>\n                    <Box p={3}>\n                      <IconButton\n                        d={{ base: \"flex\" }}\n                        type='submit'\n                        value={newMessage}\n                        onClick={sendText}\n                        icon={<IoSendSharp />}\n                      />\n                    </Box>\n                  </Box>\n                </div>\n              </FormControl>\n            </Box>\n          </div>\n        </>\n      ) : (\n        // to get socket.io on same page\n\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n\n      )}\n    </>\n  );\n\n}\nexport default SingleChat;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../Config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Avatar, Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  // console.log(chats);\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"17px\" }}\n        fontFamily=\"Work sans\"\n        fontWeight='bold'\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                d={{ base: \"flex\" }}\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"green\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Box>\n                  <Avatar\n                    size=\"md\"\n                    cursor=\"pointer\"\n                    src={!chat.isGroupChat?chat.users[1].pic:\"\"}\n                    />\n                </Box>\n                <Box mr={3}>\n                  <Text fontSize=\"lg\" px={3}>\n                    {!chat.isGroupChat\n                      ?\n                      getSender(loggedUser, chat.users)\n                      :\n                      chat.chatName\n                    }\n                  </Text>\n                  {chat.latestMessage && (\n                    <Text fontSize=\"sm\" px={3}>\n                      <b>{chat.latestMessage.sender.name} : </b>\n                      {chat.latestMessage.content.length > 50\n                        ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                        : chat.latestMessage.content}\n                    </Text>\n                  )}\n                </Box>\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../Config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    // console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          Messanger-App\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}